(define (domain unnamedDomain)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (atplane1city0)
    (fuel-levelplane1fl1)
    (atplane1city1)
    (fuel-levelplane1fl0)
    (fuel-levelplane1fl2)
    (fuel-levelplane1fl4)
    (fuel-levelplane1fl3)
    (atperson2city2)
    (atperson1city0)
)
    (:action flyplane1city0city1fl1fl0
    :parameters()
    :precondition (and  (atplane1city0)  (fuel-levelplane1fl1) )
    :effect(and  (atplane1city1)  (fuel-levelplane1fl0)  (not (atplane1city0))  (not (fuel-levelplane1fl1)) )
)
    (:action flyplane1city0city0fl2fl1
    :parameters()
    :precondition (and  (atplane1city0)  (fuel-levelplane1fl2) )
    :effect(and  (atplane1city0)  (fuel-levelplane1fl1)  (not (fuel-levelplane1fl2)) )
)
    (:action zoomplane1city0city0fl4fl3fl2
    :parameters()
    :precondition (and  (atplane1city0)  (fuel-levelplane1fl4) )
    :effect(and  (atplane1city0)  (fuel-levelplane1fl2)  (not (fuel-levelplane1fl4)) )
)
    (:action refuelplane1city0fl3fl4
    :parameters()
    :precondition (and  (fuel-levelplane1fl3)  (atplane1city0) )
    :effect(and  (fuel-levelplane1fl4)  (not (fuel-levelplane1fl3)) )
)
    (:action refuelplane1city0fl2fl3
    :parameters()
    :precondition (and  (fuel-levelplane1fl2)  (atplane1city0) )
    :effect(and  (fuel-levelplane1fl3)  (not (fuel-levelplane1fl2)) )
)
    (:action refuelplane1city0fl1fl2
    :parameters()
    :precondition (and  (fuel-levelplane1fl1)  (atplane1city0) )
    :effect(and  (fuel-levelplane1fl2)  (not (fuel-levelplane1fl1)) )
)
)(define (domain unnamedDomain)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (atplane1city0)
    (fuel-levelplane1fl1)
    (atplane1city1)
    (fuel-levelplane1fl0)
    (fuel-levelplane1fl2)
    (fuel-levelplane1fl4)
    (fuel-levelplane1fl3)
    (atperson2city2)
    (atperson1city0)
)
    (:action flyplane1city0city1fl1fl0
    :parameters()
    :precondition (and  (atplane1city0)  (fuel-levelplane1fl1) )
    :effect(and  (atplane1city1)  (fuel-levelplane1fl0)  (not (atplane1city0))  (not (fuel-levelplane1fl1)) )
)
    (:action flyplane1city0city0fl2fl1
    :parameters()
    :precondition (and  (atplane1city0)  (fuel-levelplane1fl2) )
    :effect(and  (atplane1city0)  (fuel-levelplane1fl1)  (not (fuel-levelplane1fl2)) )
)
    (:action zoomplane1city0city0fl4fl3fl2
    :parameters()
    :precondition (and  (atplane1city0)  (fuel-levelplane1fl4) )
    :effect(and  (atplane1city0)  (fuel-levelplane1fl2)  (not (fuel-levelplane1fl4)) )
)
    (:action refuelplane1city0fl3fl4
    :parameters()
    :precondition (and  (fuel-levelplane1fl3)  (atplane1city0) )
    :effect(and  (fuel-levelplane1fl4)  (not (fuel-levelplane1fl3)) )
)
    (:action refuelplane1city0fl2fl3
    :parameters()
    :precondition (and  (fuel-levelplane1fl2)  (atplane1city0) )
    :effect(and  (fuel-levelplane1fl3)  (not (fuel-levelplane1fl2)) )
)
    (:action refuelplane1city0fl1fl2
    :parameters()
    :precondition (and  (fuel-levelplane1fl1)  (atplane1city0) )
    :effect(and  (fuel-levelplane1fl2)  (not (fuel-levelplane1fl1)) )
)
)