(define (domain domainpddl)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (lift-atf1)
    (boardedp0)
    (servedp0)
    (lift-atf0)
)
    (:action departf1p0
    :parameters()
    :precondition (and  (lift-atf1)  (boardedp0) )
    :effect(and  (servedp0)  (not (boardedp0)) )
)
    (:action upf0f1
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf1)  (not (lift-atf0)) )
)
    (:action boardf0p0
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (boardedp0) )
)
)(define (domain domainpddl)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (lift-atf1)
    (boardedp0)
    (servedp0)
    (lift-atf0)
)
    (:action departf1p0
    :parameters()
    :precondition (and  (lift-atf1)  (boardedp0) )
    :effect(and  (servedp0)  (not (boardedp0)) )
)
    (:action upf0f1
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf1)  (not (lift-atf0)) )
)
    (:action boardf0p0
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (boardedp0) )
)
)