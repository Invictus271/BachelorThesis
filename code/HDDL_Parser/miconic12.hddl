(define (domain domainpddl)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (lift-atf5)
    (boardedp0)
    (servedp0)
    (lift-atf2)
    (boardedp1)
    (servedp1)
    (lift-atf1)
    (boardedp2)
    (servedp2)
    (lift-atf4)
    (lift-atf0)
)
    (:action departf5p0
    :parameters()
    :precondition (and  (lift-atf5)  (boardedp0) )
    :effect(and  (servedp0)  (not (boardedp0)) )
)
    (:action departf2p1
    :parameters()
    :precondition (and  (lift-atf2)  (boardedp1) )
    :effect(and  (servedp1)  (not (boardedp1)) )
)
    (:action departf1p2
    :parameters()
    :precondition (and  (lift-atf1)  (boardedp2) )
    :effect(and  (servedp2)  (not (boardedp2)) )
)
    (:action boardf2p0
    :parameters()
    :precondition (and  (lift-atf2) )
    :effect(and  (boardedp0) )
)
    (:action boardf5p1
    :parameters()
    :precondition (and  (lift-atf5) )
    :effect(and  (boardedp1) )
)
    (:action boardf4p2
    :parameters()
    :precondition (and  (lift-atf4) )
    :effect(and  (boardedp2) )
)
    (:action upf0f5
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf5)  (not (lift-atf0)) )
)
    (:action upf0f2
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf2)  (not (lift-atf0)) )
)
    (:action downf2f1
    :parameters()
    :precondition (and  (lift-atf2) )
    :effect(and  (lift-atf1)  (not (lift-atf2)) )
)
    (:action upf0f4
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf4)  (not (lift-atf0)) )
)
    (:action upf4f5
    :parameters()
    :precondition (and  (lift-atf4) )
    :effect(and  (lift-atf5)  (not (lift-atf4)) )
)
    (:action downf1f0
    :parameters()
    :precondition (and  (lift-atf1) )
    :effect(and  (lift-atf0)  (not (lift-atf1)) )
)
    (:action downf5f0
    :parameters()
    :precondition (and  (lift-atf5) )
    :effect(and  (lift-atf0)  (not (lift-atf5)) )
)
)(define (domain domainpddl)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (lift-atf5)
    (boardedp0)
    (servedp0)
    (lift-atf2)
    (boardedp1)
    (servedp1)
    (lift-atf1)
    (boardedp2)
    (servedp2)
    (lift-atf4)
    (lift-atf0)
)
    (:action departf5p0
    :parameters()
    :precondition (and  (lift-atf5)  (boardedp0) )
    :effect(and  (servedp0)  (not (boardedp0)) )
)
    (:action departf2p1
    :parameters()
    :precondition (and  (lift-atf2)  (boardedp1) )
    :effect(and  (servedp1)  (not (boardedp1)) )
)
    (:action departf1p2
    :parameters()
    :precondition (and  (lift-atf1)  (boardedp2) )
    :effect(and  (servedp2)  (not (boardedp2)) )
)
    (:action boardf2p0
    :parameters()
    :precondition (and  (lift-atf2) )
    :effect(and  (boardedp0) )
)
    (:action boardf5p1
    :parameters()
    :precondition (and  (lift-atf5) )
    :effect(and  (boardedp1) )
)
    (:action boardf4p2
    :parameters()
    :precondition (and  (lift-atf4) )
    :effect(and  (boardedp2) )
)
    (:action upf0f5
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf5)  (not (lift-atf0)) )
)
    (:action upf0f2
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf2)  (not (lift-atf0)) )
)
    (:action downf2f1
    :parameters()
    :precondition (and  (lift-atf2) )
    :effect(and  (lift-atf1)  (not (lift-atf2)) )
)
    (:action upf0f4
    :parameters()
    :precondition (and  (lift-atf0) )
    :effect(and  (lift-atf4)  (not (lift-atf0)) )
)
    (:action upf4f5
    :parameters()
    :precondition (and  (lift-atf4) )
    :effect(and  (lift-atf5)  (not (lift-atf4)) )
)
    (:action downf1f0
    :parameters()
    :precondition (and  (lift-atf1) )
    :effect(and  (lift-atf0)  (not (lift-atf1)) )
)
    (:action downf5f0
    :parameters()
    :precondition (and  (lift-atf5) )
    :effect(and  (lift-atf0)  (not (lift-atf5)) )
)
)