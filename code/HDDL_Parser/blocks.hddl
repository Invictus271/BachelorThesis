(define (domain domainpddl)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (holdingC)
    (clearB)
    (onCB)
    (handempty)
    (clearC)
    (holdingB)
    (clearA)
    (onBA)
    (holdingA)
    (clearE)
    (onAE)
    (holdingE)
    (clearF)
    (onEF)
    (holdingF)
    (clearD)
    (onFD)
    (ontableC)
    (ontableB)
    (onAC)
    (onEB)
    (onFE)
    (onDA)
    (holdingD)
    (ontableD)
)
    (:action stackCB
    :parameters()
    :precondition (and  (holdingC)  (clearB) )
    :effect(and  (onCB)  (handempty)  (clearC)  (not (clearB))  (not (holdingC)) )
)
    (:action stackBA
    :parameters()
    :precondition (and  (holdingB)  (clearA) )
    :effect(and  (onBA)  (handempty)  (clearB)  (not (holdingB))  (not (clearA)) )
)
    (:action stackAE
    :parameters()
    :precondition (and  (holdingA)  (clearE) )
    :effect(and  (clearA)  (handempty)  (onAE)  (not (holdingA))  (not (clearE)) )
)
    (:action stackEF
    :parameters()
    :precondition (and  (holdingE)  (clearF) )
    :effect(and  (clearE)  (handempty)  (onEF)  (not (clearF))  (not (holdingE)) )
)
    (:action stackFD
    :parameters()
    :precondition (and  (holdingF)  (clearD) )
    :effect(and  (onFD)  (handempty)  (clearF)  (not (clearD))  (not (holdingF)) )
)
    (:action pick-upC
    :parameters()
    :precondition (and  (clearC)  (ontableC)  (handempty) )
    :effect(and  (holdingC)  (not (ontableC))  (not (clearC))  (not (handempty)) )
)
    (:action pick-upB
    :parameters()
    :precondition (and  (clearB)  (ontableB)  (handempty) )
    :effect(and  (holdingB)  (not (ontableB))  (not (clearB))  (not (handempty)) )
)
    (:action unstackAC
    :parameters()
    :precondition (and  (onAC)  (clearA)  (handempty) )
    :effect(and  (clearC)  (holdingA)  (not (onAC))  (not (handempty))  (not (clearA)) )
)
    (:action unstackEB
    :parameters()
    :precondition (and  (onEB)  (clearE)  (handempty) )
    :effect(and  (holdingE)  (clearB)  (not (onEB))  (not (handempty))  (not (clearE)) )
)
    (:action unstackFE
    :parameters()
    :precondition (and  (onFE)  (clearF)  (handempty) )
    :effect(and  (clearE)  (holdingF)  (not (onFE))  (not (handempty))  (not (clearF)) )
)
    (:action unstackDA
    :parameters()
    :precondition (and  (onDA)  (clearD)  (handempty) )
    :effect(and  (clearA)  (holdingD)  (not (clearD))  (not (onDA))  (not (handempty)) )
)
    (:action put-downD
    :parameters()
    :precondition (and  (holdingD) )
    :effect(and  (clearD)  (handempty)  (ontableD)  (not (holdingD)) )
)
)
