(define (domain domainpddl)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (holdinga)
    (cleare)
    (cleara)
    (onae)
    (handempty)
    (holdingb)
    (cleard)
    (clearb)
    (onbd)
    (holdingd)
    (clearc)
    (ondc)
    (holdinge)
    (oneb)
    (ontablea)
    (onba)
    (ontabled)
    (ontablee)
    (once)
    (holdingc)
    (ontablec)
)
    (:action stackae
    :parameters()
    :precondition (and  (holdinga)  (cleare) )
    :effect(and  (cleara)  (onae)  (handempty)  (not (holdinga))  (not (cleare)) )
)
    (:action stackbd
    :parameters()
    :precondition (and  (holdingb)  (cleard) )
    :effect(and  (clearb)  (handempty)  (onbd)  (not (holdingb))  (not (cleard)) )
)
    (:action stackdc
    :parameters()
    :precondition (and  (holdingd)  (clearc) )
    :effect(and  (ondc)  (handempty)  (cleard)  (not (clearc))  (not (holdingd)) )
)
    (:action stackeb
    :parameters()
    :precondition (and  (holdinge)  (clearb) )
    :effect(and  (oneb)  (handempty)  (cleare)  (not (holdinge))  (not (clearb)) )
)
    (:action pick-upa
    :parameters()
    :precondition (and  (cleara)  (ontablea)  (handempty) )
    :effect(and  (holdinga)  (not (ontablea))  (not (cleara))  (not (handempty)) )
)
    (:action unstackba
    :parameters()
    :precondition (and  (onba)  (clearb)  (handempty) )
    :effect(and  (cleara)  (holdingb)  (not (onba))  (not (handempty))  (not (clearb)) )
)
    (:action pick-upd
    :parameters()
    :precondition (and  (cleard)  (ontabled)  (handempty) )
    :effect(and  (holdingd)  (not (ontabled))  (not (cleard))  (not (handempty)) )
)
    (:action pick-upe
    :parameters()
    :precondition (and  (cleare)  (ontablee)  (handempty) )
    :effect(and  (holdinge)  (not (ontablee))  (not (cleare))  (not (handempty)) )
)
    (:action put-downe
    :parameters()
    :precondition (and  (holdinge) )
    :effect(and  (cleare)  (handempty)  (ontablee)  (not (holdinge)) )
)
    (:action unstackeb
    :parameters()
    :precondition (and  (oneb)  (cleare)  (handempty) )
    :effect(and  (clearb)  (holdinge)  (not (handempty))  (not (oneb))  (not (cleare)) )
)
    (:action unstackce
    :parameters()
    :precondition (and  (once)  (clearc)  (handempty) )
    :effect(and  (cleare)  (holdingc)  (not (once))  (not (clearc))  (not (handempty)) )
)
    (:action put-downc
    :parameters()
    :precondition (and  (holdingc) )
    :effect(and  (clearc)  (handempty)  (ontablec)  (not (holdingc)) )
)
)(define (domain domainpddl)
(:requirements :equality :typing :conditional-effects :negative-preconditions)
(:types object)
(:predicates
    (holdinga)
    (cleare)
    (cleara)
    (onae)
    (handempty)
    (holdingb)
    (cleard)
    (clearb)
    (onbd)
    (holdingd)
    (clearc)
    (ondc)
    (holdinge)
    (oneb)
    (ontablea)
    (onba)
    (ontabled)
    (ontablee)
    (once)
    (holdingc)
    (ontablec)
)
    (:action stackae
    :parameters()
    :precondition (and  (holdinga)  (cleare) )
    :effect(and  (cleara)  (onae)  (handempty)  (not (holdinga))  (not (cleare)) )
)
    (:action stackbd
    :parameters()
    :precondition (and  (holdingb)  (cleard) )
    :effect(and  (clearb)  (handempty)  (onbd)  (not (holdingb))  (not (cleard)) )
)
    (:action stackdc
    :parameters()
    :precondition (and  (holdingd)  (clearc) )
    :effect(and  (ondc)  (handempty)  (cleard)  (not (clearc))  (not (holdingd)) )
)
    (:action stackeb
    :parameters()
    :precondition (and  (holdinge)  (clearb) )
    :effect(and  (oneb)  (handempty)  (cleare)  (not (holdinge))  (not (clearb)) )
)
    (:action pick-upa
    :parameters()
    :precondition (and  (cleara)  (ontablea)  (handempty) )
    :effect(and  (holdinga)  (not (ontablea))  (not (cleara))  (not (handempty)) )
)
    (:action unstackba
    :parameters()
    :precondition (and  (onba)  (clearb)  (handempty) )
    :effect(and  (cleara)  (holdingb)  (not (onba))  (not (handempty))  (not (clearb)) )
)
    (:action pick-upd
    :parameters()
    :precondition (and  (cleard)  (ontabled)  (handempty) )
    :effect(and  (holdingd)  (not (ontabled))  (not (cleard))  (not (handempty)) )
)
    (:action pick-upe
    :parameters()
    :precondition (and  (cleare)  (ontablee)  (handempty) )
    :effect(and  (holdinge)  (not (ontablee))  (not (cleare))  (not (handempty)) )
)
    (:action put-downe
    :parameters()
    :precondition (and  (holdinge) )
    :effect(and  (cleare)  (handempty)  (ontablee)  (not (holdinge)) )
)
    (:action unstackeb
    :parameters()
    :precondition (and  (oneb)  (cleare)  (handempty) )
    :effect(and  (clearb)  (holdinge)  (not (handempty))  (not (oneb))  (not (cleare)) )
)
    (:action unstackce
    :parameters()
    :precondition (and  (once)  (clearc)  (handempty) )
    :effect(and  (cleare)  (holdingc)  (not (once))  (not (clearc))  (not (handempty)) )
)
    (:action put-downc
    :parameters()
    :precondition (and  (holdingc) )
    :effect(and  (clearc)  (handempty)  (ontablec)  (not (holdingc)) )
)
)